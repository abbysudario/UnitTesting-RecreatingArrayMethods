
<script src="../simpletest.js"></script>
<script>

//Prototype Implementation:

//Function signature:
  //arr.lastIndexOf(searchElement[, fromIndex])

//Callback parameters:
  //searchElement
  //fromIndex

//Return Value: 
  //The last index of the element in the array
  //-1 if not found.

//Description: 
//lastIndexOf() compares searchElement to elements of the Array using strict equality (the same method used by the === or triple-equals operator).

function lastIndexOf(array, searchEl, fromIndex) {
const length = array.length
let startIndex = length - 1;
if(fromIndex) {
startIndex = fromIndex;
}
if(fromIndex && fromIndex >= length ) {
startIndex = length - 1;
}
for(i = startIndex; i >=0; i--) {
if(searchEl === array[i]) {
return i;
}
}
return -1;
}
tests({
'It should return the last index of the searchElement in the array.': function() {
const result = lastIndexOf([2, 1, 2, 3], 2);
eq(result, 2)
},
'It should return -1 if the searchElement is not found in the array.': function() {
const result = lastIndexOf([1, 2, 3], 4);
eq(result, -1)
},
'It should start searching at the index passed in as the 3rd parameter.': function() {
const result = lastIndexOf([1, 1, 1, 1, 1], 1, 2);
eq(result, 2);
},
'If the fromIndex parameter value is a negative number, it is taken as the offset from the end of the array.': function() {
const result = lastIndexOf([1, 2, 3, 4], 3, -1);
eq(result, -1)
},
'It should search the entire array if the fromIndex is greater than or equal to the array/s length.': function() {
const result = lastIndexOf([1, 2, 3], 2, 4);
eq(result, 1);
},
'It should search the whole array if no index is provided  (arr.length - 1).': function() {
const result = lastIndexOf([2, 1, 2, 3], 2);
eq(result, 2)
},
'It should search the whole array if the provided index is 0.': function() {
const result = lastIndexOf([2, 1, 2, 3], 2, 0);
eq(result, 2)
}
})

</script>